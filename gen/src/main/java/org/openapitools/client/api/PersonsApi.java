/*
 * üèõÔ∏è TDW - ACiencia REST api
 * [UPM] TDW REST api ACiencia
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: miw.etsisi@upm.es
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineResponse2003;
import org.openapitools.client.model.InlineResponse2006;
import org.openapitools.client.model.InlineResponse2008;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.Person;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonsApi {
    private ApiClient localVarApiClient;

    public PersonsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PersonsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiPersonsAddRemEntity
     * @param personId ID of person (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param entityId ID of entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: person is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPersonsAddRemEntityCall(Long personId, String operation, Long entityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{personId}/entities/{operation}/{entityId}"
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()))
            .replaceAll("\\{" + "operation" + "\\}", localVarApiClient.escapeString(operation.toString()))
            .replaceAll("\\{" + "entityId" + "\\}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPersonsAddRemEntityValidateBeforeCall(Long personId, String operation, Long entityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling apiPersonsAddRemEntity(Async)");
        }
        
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling apiPersonsAddRemEntity(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling apiPersonsAddRemEntity(Async)");
        }
        

        okhttp3.Call localVarCall = apiPersonsAddRemEntityCall(personId, operation, entityId, _callback);
        return localVarCall;

    }

    /**
     * Sets or remove the relationship person-entity
     * Establishes/Removes the relationship of the person with the entity
     * @param personId ID of person (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param entityId ID of entity (required)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: person is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Person apiPersonsAddRemEntity(Long personId, String operation, Long entityId) throws ApiException {
        ApiResponse<Person> localVarResp = apiPersonsAddRemEntityWithHttpInfo(personId, operation, entityId);
        return localVarResp.getData();
    }

    /**
     * Sets or remove the relationship person-entity
     * Establishes/Removes the relationship of the person with the entity
     * @param personId ID of person (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param entityId ID of entity (required)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: person is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> apiPersonsAddRemEntityWithHttpInfo(Long personId, String operation, Long entityId) throws ApiException {
        okhttp3.Call localVarCall = apiPersonsAddRemEntityValidateBeforeCall(personId, operation, entityId, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets or remove the relationship person-entity (asynchronously)
     * Establishes/Removes the relationship of the person with the entity
     * @param personId ID of person (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param entityId ID of entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: person is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPersonsAddRemEntityAsync(Long personId, String operation, Long entityId, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPersonsAddRemEntityValidateBeforeCall(personId, operation, entityId, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiPersonsAddRemProduct
     * @param personId ID of person (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param productId ID of product (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: person is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPersonsAddRemProductCall(Long personId, String operation, Long productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{personId}/products/{operation}/{productId}"
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()))
            .replaceAll("\\{" + "operation" + "\\}", localVarApiClient.escapeString(operation.toString()))
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiPersonsAddRemProductValidateBeforeCall(Long personId, String operation, Long productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling apiPersonsAddRemProduct(Async)");
        }
        
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling apiPersonsAddRemProduct(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling apiPersonsAddRemProduct(Async)");
        }
        

        okhttp3.Call localVarCall = apiPersonsAddRemProductCall(personId, operation, productId, _callback);
        return localVarCall;

    }

    /**
     * Sets or remove the relationship person-product
     * Establishes/Removes the relationship of the person with the product
     * @param personId ID of person (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param productId ID of product (required)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: person is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Person apiPersonsAddRemProduct(Long personId, String operation, Long productId) throws ApiException {
        ApiResponse<Person> localVarResp = apiPersonsAddRemProductWithHttpInfo(personId, operation, productId);
        return localVarResp.getData();
    }

    /**
     * Sets or remove the relationship person-product
     * Establishes/Removes the relationship of the person with the product
     * @param personId ID of person (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param productId ID of product (required)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: person is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> apiPersonsAddRemProductWithHttpInfo(Long personId, String operation, Long productId) throws ApiException {
        okhttp3.Call localVarCall = apiPersonsAddRemProductValidateBeforeCall(personId, operation, productId, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets or remove the relationship person-product (asynchronously)
     * Establishes/Removes the relationship of the person with the product
     * @param personId ID of person (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param productId ID of product (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: person is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiPersonsAddRemProductAsync(Long personId, String operation, Long productId, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiPersonsAddRemProductValidateBeforeCall(personId, operation, productId, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPerson
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: person created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPersonCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/persons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPersonValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createPersonCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Creates a Person resource.
     * Creates a new person
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: person created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public Person createPerson(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<Person> localVarResp = createPersonWithHttpInfo(UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Creates a Person resource.
     * Creates a new person
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: person created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> createPersonWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = createPersonValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a Person resource. (asynchronously)
     * Creates a new person
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: person created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPersonAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPersonValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePerson
     * @param personId ID of person (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Person deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePersonCall(Long personId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{personId}"
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePersonValidateBeforeCall(Long personId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling deletePerson(Async)");
        }
        

        okhttp3.Call localVarCall = deletePersonCall(personId, _callback);
        return localVarCall;

    }

    /**
     * Removes the Person resource.
     * Deletes the entity identified by &#x60;personId&#x60;.
     * @param personId ID of person (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Person deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public void deletePerson(Long personId) throws ApiException {
        deletePersonWithHttpInfo(personId);
    }

    /**
     * Removes the Person resource.
     * Deletes the entity identified by &#x60;personId&#x60;.
     * @param personId ID of person (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Person deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePersonWithHttpInfo(Long personId) throws ApiException {
        okhttp3.Call localVarCall = deletePersonValidateBeforeCall(personId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes the Person resource. (asynchronously)
     * Deletes the entity identified by &#x60;personId&#x60;.
     * @param personId ID of person (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Person deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePersonAsync(Long personId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePersonValidateBeforeCall(personId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for existsPerson
     * @param personname Person name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Personname exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call existsPersonCall(String personname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/personname/{personname}"
            .replaceAll("\\{" + "personname" + "\\}", localVarApiClient.escapeString(personname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call existsPersonValidateBeforeCall(String personname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personname' is set
        if (personname == null) {
            throw new ApiException("Missing the required parameter 'personname' when calling existsPerson(Async)");
        }
        

        okhttp3.Call localVarCall = existsPersonCall(personname, _callback);
        return localVarCall;

    }

    /**
     * Determines if personname exists
     * Returns status code 204 if &#x60;personname&#x60; exists.
     * @param personname Person name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Personname exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public void existsPerson(String personname) throws ApiException {
        existsPersonWithHttpInfo(personname);
    }

    /**
     * Determines if personname exists
     * Returns status code 204 if &#x60;personname&#x60; exists.
     * @param personname Person name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Personname exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> existsPersonWithHttpInfo(String personname) throws ApiException {
        okhttp3.Call localVarCall = existsPersonValidateBeforeCall(personname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Determines if personname exists (asynchronously)
     * Returns status code 204 if &#x60;personname&#x60; exists.
     * @param personname Person name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Personname exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call existsPersonAsync(String personname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = existsPersonValidateBeforeCall(personname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for optionsEntity
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call optionsEntityCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optionsEntityValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = optionsEntityCall(_callback);
        return localVarCall;

    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public void optionsEntity() throws ApiException {
        optionsEntityWithHttpInfo();
    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> optionsEntityWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = optionsEntityValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Provides the list of HTTP supported methods. (asynchronously)
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call optionsEntityAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = optionsEntityValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for optionsPerson
     * @param personId ID of person (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call optionsPersonCall(Long personId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{personId}"
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optionsPersonValidateBeforeCall(Long personId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling optionsPerson(Async)");
        }
        

        okhttp3.Call localVarCall = optionsPersonCall(personId, _callback);
        return localVarCall;

    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param personId ID of person (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public void optionsPerson(Long personId) throws ApiException {
        optionsPersonWithHttpInfo(personId);
    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param personId ID of person (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> optionsPersonWithHttpInfo(Long personId) throws ApiException {
        okhttp3.Call localVarCall = optionsPersonValidateBeforeCall(personId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Provides the list of HTTP supported methods. (asynchronously)
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param personId ID of person (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call optionsPersonAsync(Long personId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = optionsPersonValidateBeforeCall(personId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for readPerson
     * @param personId ID of person (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readPersonCall(Long personId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{personId}"
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readPersonValidateBeforeCall(Long personId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling readPerson(Async)");
        }
        

        okhttp3.Call localVarCall = readPersonCall(personId, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a Person resource based on a single ID.
     * Returns the product identified by &#x60;personId&#x60;.
     * @param personId ID of person (required)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Person readPerson(Long personId) throws ApiException {
        ApiResponse<Person> localVarResp = readPersonWithHttpInfo(personId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Person resource based on a single ID.
     * Returns the product identified by &#x60;personId&#x60;.
     * @param personId ID of person (required)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> readPersonWithHttpInfo(Long personId) throws ApiException {
        okhttp3.Call localVarCall = readPersonValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Person resource based on a single ID. (asynchronously)
     * Returns the product identified by &#x60;personId&#x60;.
     * @param personId ID of person (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Person </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readPersonAsync(Long personId, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = readPersonValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readPersonEntities
     * @param personId ID of person (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Entities </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readPersonEntitiesCall(Long personId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{personId}/entities"
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readPersonEntitiesValidateBeforeCall(Long personId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling readPersonEntities(Async)");
        }
        

        okhttp3.Call localVarCall = readPersonEntitiesCall(personId, _callback);
        return localVarCall;

    }

    /**
     * List of entities related to the person
     * Returns the entities related to the person &#x60;personId&#x60;
     * @param personId ID of person (required)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Entities </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2003 readPersonEntities(Long personId) throws ApiException {
        ApiResponse<InlineResponse2003> localVarResp = readPersonEntitiesWithHttpInfo(personId);
        return localVarResp.getData();
    }

    /**
     * List of entities related to the person
     * Returns the entities related to the person &#x60;personId&#x60;
     * @param personId ID of person (required)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Entities </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2003> readPersonEntitiesWithHttpInfo(Long personId) throws ApiException {
        okhttp3.Call localVarCall = readPersonEntitiesValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of entities related to the person (asynchronously)
     * Returns the entities related to the person &#x60;personId&#x60;
     * @param personId ID of person (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Entities </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readPersonEntitiesAsync(Long personId, final ApiCallback<InlineResponse2003> _callback) throws ApiException {

        okhttp3.Call localVarCall = readPersonEntitiesValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readPersonProducts
     * @param personId ID of person (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Products </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readPersonProductsCall(Long personId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons/{personId}/products"
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readPersonProductsValidateBeforeCall(Long personId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling readPersonProducts(Async)");
        }
        

        okhttp3.Call localVarCall = readPersonProductsCall(personId, _callback);
        return localVarCall;

    }

    /**
     * List of products related to the person
     * Returns the products related to the person &#x60;personId&#x60;
     * @param personId ID of person (required)
     * @return InlineResponse2006
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Products </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2006 readPersonProducts(Long personId) throws ApiException {
        ApiResponse<InlineResponse2006> localVarResp = readPersonProductsWithHttpInfo(personId);
        return localVarResp.getData();
    }

    /**
     * List of products related to the person
     * Returns the products related to the person &#x60;personId&#x60;
     * @param personId ID of person (required)
     * @return ApiResponse&lt;InlineResponse2006&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Products </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2006> readPersonProductsWithHttpInfo(Long personId) throws ApiException {
        okhttp3.Call localVarCall = readPersonProductsValidateBeforeCall(personId, null);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of products related to the person (asynchronously)
     * Returns the products related to the person &#x60;personId&#x60;
     * @param personId ID of person (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Products </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readPersonProductsAsync(Long personId, final ApiCallback<InlineResponse2006> _callback) throws ApiException {

        okhttp3.Call localVarCall = readPersonProductsValidateBeforeCall(personId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readPersons
     * @param order &#x60;id&#x60; | &#x60;name&#x60; (optional)
     * @param ordering &#x60;ASC&#x60; | &#x60;DESC&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of persons </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readPersonsCall(String order, String ordering, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/persons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readPersonsValidateBeforeCall(String order, String ordering, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = readPersonsCall(order, ordering, _callback);
        return localVarCall;

    }

    /**
     * Retrieves the collection of Person resources.
     * Returns all persons from the system that the user has access to.
     * @param order &#x60;id&#x60; | &#x60;name&#x60; (optional)
     * @param ordering &#x60;ASC&#x60; | &#x60;DESC&#x60; (optional)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of persons </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2008 readPersons(String order, String ordering) throws ApiException {
        ApiResponse<InlineResponse2008> localVarResp = readPersonsWithHttpInfo(order, ordering);
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of Person resources.
     * Returns all persons from the system that the user has access to.
     * @param order &#x60;id&#x60; | &#x60;name&#x60; (optional)
     * @param ordering &#x60;ASC&#x60; | &#x60;DESC&#x60; (optional)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of persons </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2008> readPersonsWithHttpInfo(String order, String ordering) throws ApiException {
        okhttp3.Call localVarCall = readPersonsValidateBeforeCall(order, ordering, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of Person resources. (asynchronously)
     * Returns all persons from the system that the user has access to.
     * @param order &#x60;id&#x60; | &#x60;name&#x60; (optional)
     * @param ordering &#x60;ASC&#x60; | &#x60;DESC&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of persons </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readPersonsAsync(String order, String ordering, final ApiCallback<InlineResponse2008> _callback) throws ApiException {

        okhttp3.Call localVarCall = readPersonsValidateBeforeCall(order, ordering, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePerson
     * @param personId ID of person (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: person previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePersonCall(Long personId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/persons/{personId}"
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePersonValidateBeforeCall(Long personId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling updatePerson(Async)");
        }
        
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling updatePerson(Async)");
        }
        

        okhttp3.Call localVarCall = updatePersonCall(personId, ifMatch, UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Updates the Person resource.
     * Updates the person identified by &#x60;personId&#x60;.
     * @param personId ID of person (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @return Person
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: person previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public Person updatePerson(Long personId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<Person> localVarResp = updatePersonWithHttpInfo(personId, ifMatch, UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Updates the Person resource.
     * Updates the person identified by &#x60;personId&#x60;.
     * @param personId ID of person (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @return ApiResponse&lt;Person&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: person previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Person> updatePersonWithHttpInfo(Long personId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = updatePersonValidateBeforeCall(personId, ifMatch, UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Person resource. (asynchronously)
     * Updates the person identified by &#x60;personId&#x60;.
     * @param personId ID of person (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: person previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePersonAsync(Long personId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePersonValidateBeforeCall(personId, ifMatch, UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
