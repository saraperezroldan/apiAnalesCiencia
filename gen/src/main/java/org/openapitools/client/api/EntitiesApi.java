/*
 * üèõÔ∏è TDW - ACiencia REST api
 * [UPM] TDW REST api ACiencia
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: miw.etsisi@upm.es
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Entity;
import org.openapitools.client.model.InlineResponse2005;
import org.openapitools.client.model.InlineResponse2006;
import org.openapitools.client.model.InlineResponse2007;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EntitiesApi {
    private ApiClient localVarApiClient;

    public EntitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiEntitiesAddRemPerson
     * @param entityId ID of entity (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param personId ID of person (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: entity is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiEntitiesAddRemPersonCall(Long entityId, String operation, Long personId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/{entityId}/persons/{operation}/{personId}"
            .replaceAll("\\{" + "entityId" + "\\}", localVarApiClient.escapeString(entityId.toString()))
            .replaceAll("\\{" + "operation" + "\\}", localVarApiClient.escapeString(operation.toString()))
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiEntitiesAddRemPersonValidateBeforeCall(Long entityId, String operation, Long personId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling apiEntitiesAddRemPerson(Async)");
        }
        
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling apiEntitiesAddRemPerson(Async)");
        }
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling apiEntitiesAddRemPerson(Async)");
        }
        

        okhttp3.Call localVarCall = apiEntitiesAddRemPersonCall(entityId, operation, personId, _callback);
        return localVarCall;

    }

    /**
     * Sets or remove the relationship entity-person
     * Establishes/Removes the relationship of the entity with the person
     * @param entityId ID of entity (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param personId ID of person (required)
     * @return Entity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: entity is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Entity apiEntitiesAddRemPerson(Long entityId, String operation, Long personId) throws ApiException {
        ApiResponse<Entity> localVarResp = apiEntitiesAddRemPersonWithHttpInfo(entityId, operation, personId);
        return localVarResp.getData();
    }

    /**
     * Sets or remove the relationship entity-person
     * Establishes/Removes the relationship of the entity with the person
     * @param entityId ID of entity (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param personId ID of person (required)
     * @return ApiResponse&lt;Entity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: entity is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Entity> apiEntitiesAddRemPersonWithHttpInfo(Long entityId, String operation, Long personId) throws ApiException {
        okhttp3.Call localVarCall = apiEntitiesAddRemPersonValidateBeforeCall(entityId, operation, personId, null);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets or remove the relationship entity-person (asynchronously)
     * Establishes/Removes the relationship of the entity with the person
     * @param entityId ID of entity (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param personId ID of person (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: entity is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiEntitiesAddRemPersonAsync(Long entityId, String operation, Long personId, final ApiCallback<Entity> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiEntitiesAddRemPersonValidateBeforeCall(entityId, operation, personId, _callback);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiEntitiesAddRemProduct
     * @param entityId ID of entity (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param productId ID of product (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: entity is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiEntitiesAddRemProductCall(Long entityId, String operation, Long productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/{entityId}/products/{operation}/{productId}"
            .replaceAll("\\{" + "entityId" + "\\}", localVarApiClient.escapeString(entityId.toString()))
            .replaceAll("\\{" + "operation" + "\\}", localVarApiClient.escapeString(operation.toString()))
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiEntitiesAddRemProductValidateBeforeCall(Long entityId, String operation, Long productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling apiEntitiesAddRemProduct(Async)");
        }
        
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling apiEntitiesAddRemProduct(Async)");
        }
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling apiEntitiesAddRemProduct(Async)");
        }
        

        okhttp3.Call localVarCall = apiEntitiesAddRemProductCall(entityId, operation, productId, _callback);
        return localVarCall;

    }

    /**
     * Sets or remove the relationship entity-product
     * Establishes/Removes the relationship of the entity with the product
     * @param entityId ID of entity (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param productId ID of product (required)
     * @return Entity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: entity is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Entity apiEntitiesAddRemProduct(Long entityId, String operation, Long productId) throws ApiException {
        ApiResponse<Entity> localVarResp = apiEntitiesAddRemProductWithHttpInfo(entityId, operation, productId);
        return localVarResp.getData();
    }

    /**
     * Sets or remove the relationship entity-product
     * Establishes/Removes the relationship of the entity with the product
     * @param entityId ID of entity (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param productId ID of product (required)
     * @return ApiResponse&lt;Entity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: entity is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Entity> apiEntitiesAddRemProductWithHttpInfo(Long entityId, String operation, Long productId) throws ApiException {
        okhttp3.Call localVarCall = apiEntitiesAddRemProductValidateBeforeCall(entityId, operation, productId, null);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets or remove the relationship entity-product (asynchronously)
     * Establishes/Removes the relationship of the entity with the product
     * @param entityId ID of entity (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param productId ID of product (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: entity is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiEntitiesAddRemProductAsync(Long entityId, String operation, Long productId, final ApiCallback<Entity> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiEntitiesAddRemProductValidateBeforeCall(entityId, operation, productId, _callback);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cOptionsEntity
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call cOptionsEntityCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cOptionsEntityValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = cOptionsEntityCall(_callback);
        return localVarCall;

    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public void cOptionsEntity() throws ApiException {
        cOptionsEntityWithHttpInfo();
    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> cOptionsEntityWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cOptionsEntityValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Provides the list of HTTP supported methods. (asynchronously)
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call cOptionsEntityAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cOptionsEntityValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEntity
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: entity created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEntityCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEntityValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createEntityCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Creates a Entity resource.
     * Creates a new entity
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @return Entity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: entity created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public Entity createEntity(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<Entity> localVarResp = createEntityWithHttpInfo(UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Creates a Entity resource.
     * Creates a new entity
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @return ApiResponse&lt;Entity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: entity created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Entity> createEntityWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = createEntityValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a Entity resource. (asynchronously)
     * Creates a new entity
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: entity created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEntityAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Entity> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEntityValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEntity
     * @param entityId ID of entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Entity deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEntityCall(Long entityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/{entityId}"
            .replaceAll("\\{" + "entityId" + "\\}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEntityValidateBeforeCall(Long entityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling deleteEntity(Async)");
        }
        

        okhttp3.Call localVarCall = deleteEntityCall(entityId, _callback);
        return localVarCall;

    }

    /**
     * Removes the Entity resource.
     * Deletes the entity identified by &#x60;entityId&#x60;.
     * @param entityId ID of entity (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Entity deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEntity(Long entityId) throws ApiException {
        deleteEntityWithHttpInfo(entityId);
    }

    /**
     * Removes the Entity resource.
     * Deletes the entity identified by &#x60;entityId&#x60;.
     * @param entityId ID of entity (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Entity deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEntityWithHttpInfo(Long entityId) throws ApiException {
        okhttp3.Call localVarCall = deleteEntityValidateBeforeCall(entityId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes the Entity resource. (asynchronously)
     * Deletes the entity identified by &#x60;entityId&#x60;.
     * @param entityId ID of entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Entity deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEntityAsync(Long entityId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEntityValidateBeforeCall(entityId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for existsEntity
     * @param entityname Entity name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Entityname exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call existsEntityCall(String entityname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/entityname/{entityname}"
            .replaceAll("\\{" + "entityname" + "\\}", localVarApiClient.escapeString(entityname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call existsEntityValidateBeforeCall(String entityname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityname' is set
        if (entityname == null) {
            throw new ApiException("Missing the required parameter 'entityname' when calling existsEntity(Async)");
        }
        

        okhttp3.Call localVarCall = existsEntityCall(entityname, _callback);
        return localVarCall;

    }

    /**
     * Determines if entityname exists
     * Returns status code 204 if &#x60;entityname&#x60; exists.
     * @param entityname Entity name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Entityname exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public void existsEntity(String entityname) throws ApiException {
        existsEntityWithHttpInfo(entityname);
    }

    /**
     * Determines if entityname exists
     * Returns status code 204 if &#x60;entityname&#x60; exists.
     * @param entityname Entity name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Entityname exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> existsEntityWithHttpInfo(String entityname) throws ApiException {
        okhttp3.Call localVarCall = existsEntityValidateBeforeCall(entityname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Determines if entityname exists (asynchronously)
     * Returns status code 204 if &#x60;entityname&#x60; exists.
     * @param entityname Entity name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Entityname exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call existsEntityAsync(String entityname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = existsEntityValidateBeforeCall(entityname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for optionsEntity
     * @param entityId ID of entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call optionsEntityCall(Long entityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/{entityId}"
            .replaceAll("\\{" + "entityId" + "\\}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optionsEntityValidateBeforeCall(Long entityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling optionsEntity(Async)");
        }
        

        okhttp3.Call localVarCall = optionsEntityCall(entityId, _callback);
        return localVarCall;

    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param entityId ID of entity (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public void optionsEntity(Long entityId) throws ApiException {
        optionsEntityWithHttpInfo(entityId);
    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param entityId ID of entity (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> optionsEntityWithHttpInfo(Long entityId) throws ApiException {
        okhttp3.Call localVarCall = optionsEntityValidateBeforeCall(entityId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Provides the list of HTTP supported methods. (asynchronously)
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param entityId ID of entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call optionsEntityAsync(Long entityId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = optionsEntityValidateBeforeCall(entityId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for readEntities
     * @param order &#x60;id&#x60; | &#x60;name&#x60; (optional)
     * @param ordering &#x60;ASC&#x60; | &#x60;DESC&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of entities </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readEntitiesCall(String order, String ordering, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readEntitiesValidateBeforeCall(String order, String ordering, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = readEntitiesCall(order, ordering, _callback);
        return localVarCall;

    }

    /**
     * Retrieves the collection of Entity resources.
     * Returns all entities from the system that the user has access to.
     * @param order &#x60;id&#x60; | &#x60;name&#x60; (optional)
     * @param ordering &#x60;ASC&#x60; | &#x60;DESC&#x60; (optional)
     * @return InlineResponse2005
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of entities </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2005 readEntities(String order, String ordering) throws ApiException {
        ApiResponse<InlineResponse2005> localVarResp = readEntitiesWithHttpInfo(order, ordering);
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of Entity resources.
     * Returns all entities from the system that the user has access to.
     * @param order &#x60;id&#x60; | &#x60;name&#x60; (optional)
     * @param ordering &#x60;ASC&#x60; | &#x60;DESC&#x60; (optional)
     * @return ApiResponse&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of entities </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2005> readEntitiesWithHttpInfo(String order, String ordering) throws ApiException {
        okhttp3.Call localVarCall = readEntitiesValidateBeforeCall(order, ordering, null);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of Entity resources. (asynchronously)
     * Returns all entities from the system that the user has access to.
     * @param order &#x60;id&#x60; | &#x60;name&#x60; (optional)
     * @param ordering &#x60;ASC&#x60; | &#x60;DESC&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of entities </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readEntitiesAsync(String order, String ordering, final ApiCallback<InlineResponse2005> _callback) throws ApiException {

        okhttp3.Call localVarCall = readEntitiesValidateBeforeCall(order, ordering, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readEntity
     * @param entityId ID of entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readEntityCall(Long entityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/{entityId}"
            .replaceAll("\\{" + "entityId" + "\\}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readEntityValidateBeforeCall(Long entityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling readEntity(Async)");
        }
        

        okhttp3.Call localVarCall = readEntityCall(entityId, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a Entity resource based on a single ID.
     * Returns the product identified by &#x60;entityId&#x60;.
     * @param entityId ID of entity (required)
     * @return Entity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Entity readEntity(Long entityId) throws ApiException {
        ApiResponse<Entity> localVarResp = readEntityWithHttpInfo(entityId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Entity resource based on a single ID.
     * Returns the product identified by &#x60;entityId&#x60;.
     * @param entityId ID of entity (required)
     * @return ApiResponse&lt;Entity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Entity> readEntityWithHttpInfo(Long entityId) throws ApiException {
        okhttp3.Call localVarCall = readEntityValidateBeforeCall(entityId, null);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Entity resource based on a single ID. (asynchronously)
     * Returns the product identified by &#x60;entityId&#x60;.
     * @param entityId ID of entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entity </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readEntityAsync(Long entityId, final ApiCallback<Entity> _callback) throws ApiException {

        okhttp3.Call localVarCall = readEntityValidateBeforeCall(entityId, _callback);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readEntityPersons
     * @param entityId ID of entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Persons </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readEntityPersonsCall(Long entityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/{entityId}/persons"
            .replaceAll("\\{" + "entityId" + "\\}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readEntityPersonsValidateBeforeCall(Long entityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling readEntityPersons(Async)");
        }
        

        okhttp3.Call localVarCall = readEntityPersonsCall(entityId, _callback);
        return localVarCall;

    }

    /**
     * List of persons related to the entity
     * Returns the persons related to the entity &#x60;entityId&#x60;
     * @param entityId ID of entity (required)
     * @return InlineResponse2007
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Persons </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2007 readEntityPersons(Long entityId) throws ApiException {
        ApiResponse<InlineResponse2007> localVarResp = readEntityPersonsWithHttpInfo(entityId);
        return localVarResp.getData();
    }

    /**
     * List of persons related to the entity
     * Returns the persons related to the entity &#x60;entityId&#x60;
     * @param entityId ID of entity (required)
     * @return ApiResponse&lt;InlineResponse2007&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Persons </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2007> readEntityPersonsWithHttpInfo(Long entityId) throws ApiException {
        okhttp3.Call localVarCall = readEntityPersonsValidateBeforeCall(entityId, null);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of persons related to the entity (asynchronously)
     * Returns the persons related to the entity &#x60;entityId&#x60;
     * @param entityId ID of entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Persons </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readEntityPersonsAsync(Long entityId, final ApiCallback<InlineResponse2007> _callback) throws ApiException {

        okhttp3.Call localVarCall = readEntityPersonsValidateBeforeCall(entityId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readEntityProducts
     * @param entityId ID of entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Products </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readEntityProductsCall(Long entityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entities/{entityId}/products"
            .replaceAll("\\{" + "entityId" + "\\}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readEntityProductsValidateBeforeCall(Long entityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling readEntityProducts(Async)");
        }
        

        okhttp3.Call localVarCall = readEntityProductsCall(entityId, _callback);
        return localVarCall;

    }

    /**
     * List of products related to the entity
     * Returns the products related to the entity &#x60;entityId&#x60;
     * @param entityId ID of entity (required)
     * @return InlineResponse2006
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Products </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2006 readEntityProducts(Long entityId) throws ApiException {
        ApiResponse<InlineResponse2006> localVarResp = readEntityProductsWithHttpInfo(entityId);
        return localVarResp.getData();
    }

    /**
     * List of products related to the entity
     * Returns the products related to the entity &#x60;entityId&#x60;
     * @param entityId ID of entity (required)
     * @return ApiResponse&lt;InlineResponse2006&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Products </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2006> readEntityProductsWithHttpInfo(Long entityId) throws ApiException {
        okhttp3.Call localVarCall = readEntityProductsValidateBeforeCall(entityId, null);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of products related to the entity (asynchronously)
     * Returns the products related to the entity &#x60;entityId&#x60;
     * @param entityId ID of entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Products </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readEntityProductsAsync(Long entityId, final ApiCallback<InlineResponse2006> _callback) throws ApiException {

        okhttp3.Call localVarCall = readEntityProductsValidateBeforeCall(entityId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEntity
     * @param entityId ID of entity (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: entity previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEntityCall(Long entityId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/entities/{entityId}"
            .replaceAll("\\{" + "entityId" + "\\}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEntityValidateBeforeCall(Long entityId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling updateEntity(Async)");
        }
        
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling updateEntity(Async)");
        }
        

        okhttp3.Call localVarCall = updateEntityCall(entityId, ifMatch, UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Updates the Entity resource.
     * Updates the product identified by &#x60;entityId&#x60;.
     * @param entityId ID of entity (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @return Entity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: entity previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public Entity updateEntity(Long entityId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<Entity> localVarResp = updateEntityWithHttpInfo(entityId, ifMatch, UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Updates the Entity resource.
     * Updates the product identified by &#x60;entityId&#x60;.
     * @param entityId ID of entity (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @return ApiResponse&lt;Entity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: entity previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Entity> updateEntityWithHttpInfo(Long entityId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = updateEntityValidateBeforeCall(entityId, ifMatch, UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Entity resource. (asynchronously)
     * Updates the product identified by &#x60;entityId&#x60;.
     * @param entityId ID of entity (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: entity previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEntityAsync(Long entityId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Entity> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEntityValidateBeforeCall(entityId, ifMatch, UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<Entity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
