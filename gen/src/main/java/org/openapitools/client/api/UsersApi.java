/*
 * üèõÔ∏è TDW - ACiencia REST api
 * [UPM] TDW REST api ACiencia
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: miw.etsisi@upm.es
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineResponse2001;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import org.openapitools.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiGetUserName
     * @param username User name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Username exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiGetUserNameCall(String username, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/username/{username}"
            .replaceAll("\\{" + "username" + "\\}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiGetUserNameValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling apiGetUserName(Async)");
        }
        

        okhttp3.Call localVarCall = apiGetUserNameCall(username, _callback);
        return localVarCall;

    }

    /**
     * Determines if username exists
     * Returns status code 204 if &#x60;username&#x60; exists.
     * @param username User name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Username exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public void apiGetUserName(String username) throws ApiException {
        apiGetUserNameWithHttpInfo(username);
    }

    /**
     * Determines if username exists
     * Returns status code 204 if &#x60;username&#x60; exists.
     * @param username User name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Username exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiGetUserNameWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = apiGetUserNameValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Determines if username exists (asynchronously)
     * Returns status code 204 if &#x60;username&#x60; exists.
     * @param username User name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Username exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiGetUserNameAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiGetUserNameValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiUsersCget
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of users </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsersCgetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUsersCgetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiUsersCgetCall(_callback);
        return localVarCall;

    }

    /**
     * Retrieves the collection of User resources.
     * Returns all users from the system that the user has access to.
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of users </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2001 apiUsersCget() throws ApiException {
        ApiResponse<InlineResponse2001> localVarResp = apiUsersCgetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of User resources.
     * Returns all users from the system that the user has access to.
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of users </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2001> apiUsersCgetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiUsersCgetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of User resources. (asynchronously)
     * Returns all users from the system that the user has access to.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of users </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsersCgetAsync(final ApiCallback<InlineResponse2001> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUsersCgetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiUsersCoptions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsersCoptionsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUsersCoptionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiUsersCoptionsCall(_callback);
        return localVarCall;

    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public void apiUsersCoptions() throws ApiException {
        apiUsersCoptionsWithHttpInfo();
    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiUsersCoptionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiUsersCoptionsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Provides the list of HTTP supported methods. (asynchronously)
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsersCoptionsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUsersCoptionsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiUsersDelete
     * @param userId ID of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsersDeleteCall(Long userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUsersDeleteValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling apiUsersDelete(Async)");
        }
        

        okhttp3.Call localVarCall = apiUsersDeleteCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Removes the User resource.
     * Deletes the user identified by &#x60;userId&#x60;.
     * @param userId ID of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public void apiUsersDelete(Long userId) throws ApiException {
        apiUsersDeleteWithHttpInfo(userId);
    }

    /**
     * Removes the User resource.
     * Deletes the user identified by &#x60;userId&#x60;.
     * @param userId ID of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiUsersDeleteWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = apiUsersDeleteValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes the User resource. (asynchronously)
     * Deletes the user identified by &#x60;userId&#x60;.
     * @param userId ID of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsersDeleteAsync(Long userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUsersDeleteValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiUsersGet
     * @param userId ID of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsersGetCall(Long userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUsersGetValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling apiUsersGet(Async)");
        }
        

        okhttp3.Call localVarCall = apiUsersGetCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a User resource based on a single ID.
     * Returns the user identified by &#x60;userId&#x60;.
     * @param userId ID of user (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public User apiUsersGet(Long userId) throws ApiException {
        ApiResponse<User> localVarResp = apiUsersGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a User resource based on a single ID.
     * Returns the user identified by &#x60;userId&#x60;.
     * @param userId ID of user (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> apiUsersGetWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = apiUsersGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a User resource based on a single ID. (asynchronously)
     * Returns the user identified by &#x60;userId&#x60;.
     * @param userId ID of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsersGetAsync(Long userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUsersGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiUsersOptionsId
     * @param userId ID of user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsersOptionsIdCall(Long userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUsersOptionsIdValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling apiUsersOptionsId(Async)");
        }
        

        okhttp3.Call localVarCall = apiUsersOptionsIdCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param userId ID of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public void apiUsersOptionsId(Long userId) throws ApiException {
        apiUsersOptionsIdWithHttpInfo(userId);
    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param userId ID of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiUsersOptionsIdWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = apiUsersOptionsIdValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Provides the list of HTTP supported methods. (asynchronously)
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param userId ID of user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsersOptionsIdAsync(Long userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUsersOptionsIdValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiUsersPost
     * @param UNKNOWN_BASE_TYPE &#x60;User&#x60; data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: user created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsersPostCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUsersPostValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
        if (UNKNOWN_BASE_TYPE == null) {
            throw new ApiException("Missing the required parameter 'UNKNOWN_BASE_TYPE' when calling apiUsersPost(Async)");
        }
        

        okhttp3.Call localVarCall = apiUsersPostCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Creates a User resource.
     * Creates a new user
     * @param UNKNOWN_BASE_TYPE &#x60;User&#x60; data (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: user created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public User apiUsersPost(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<User> localVarResp = apiUsersPostWithHttpInfo(UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Creates a User resource.
     * Creates a new user
     * @param UNKNOWN_BASE_TYPE &#x60;User&#x60; data (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: user created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> apiUsersPostWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = apiUsersPostValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a User resource. (asynchronously)
     * Creates a new user
     * @param UNKNOWN_BASE_TYPE &#x60;User&#x60; data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: user created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsersPostAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUsersPostValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiUsersPut
     * @param userId ID of user (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;User&#x60; data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: user previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsersPutCall(Long userId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiUsersPutValidateBeforeCall(Long userId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling apiUsersPut(Async)");
        }
        
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling apiUsersPut(Async)");
        }
        
        // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
        if (UNKNOWN_BASE_TYPE == null) {
            throw new ApiException("Missing the required parameter 'UNKNOWN_BASE_TYPE' when calling apiUsersPut(Async)");
        }
        

        okhttp3.Call localVarCall = apiUsersPutCall(userId, ifMatch, UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Updates the User resource.
     * Updates the user identified by &#x60;userId&#x60;. - a &#x60;reader&#x60; user can only modify their own properties - a &#x60;reader&#x60; user cannot modify his role 
     * @param userId ID of user (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;User&#x60; data (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: user previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public User apiUsersPut(Long userId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<User> localVarResp = apiUsersPutWithHttpInfo(userId, ifMatch, UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Updates the User resource.
     * Updates the user identified by &#x60;userId&#x60;. - a &#x60;reader&#x60; user can only modify their own properties - a &#x60;reader&#x60; user cannot modify his role 
     * @param userId ID of user (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;User&#x60; data (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: user previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> apiUsersPutWithHttpInfo(Long userId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = apiUsersPutValidateBeforeCall(userId, ifMatch, UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the User resource. (asynchronously)
     * Updates the user identified by &#x60;userId&#x60;. - a &#x60;reader&#x60; user can only modify their own properties - a &#x60;reader&#x60; user cannot modify his role 
     * @param userId ID of user (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;User&#x60; data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: user previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiUsersPutAsync(Long userId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiUsersPutValidateBeforeCall(userId, ifMatch, UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
