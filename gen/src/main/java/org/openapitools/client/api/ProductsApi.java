/*
 * üèõÔ∏è TDW - ACiencia REST api
 * [UPM] TDW REST api ACiencia
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: miw.etsisi@upm.es
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineResponse2002;
import org.openapitools.client.model.InlineResponse2003;
import org.openapitools.client.model.InlineResponse2004;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductsApi {
    private ApiClient localVarApiClient;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiProductsAddRemEntity
     * @param productId ID of product (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param entityId ID of entity (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsAddRemEntityCall(Long productId, String operation, Long entityId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/entities/{operation}/{entityId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "operation" + "\\}", localVarApiClient.escapeString(operation.toString()))
            .replaceAll("\\{" + "entityId" + "\\}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiProductsAddRemEntityValidateBeforeCall(Long productId, String operation, Long entityId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling apiProductsAddRemEntity(Async)");
        }
        
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling apiProductsAddRemEntity(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling apiProductsAddRemEntity(Async)");
        }
        

        okhttp3.Call localVarCall = apiProductsAddRemEntityCall(productId, operation, entityId, _callback);
        return localVarCall;

    }

    /**
     * Sets or remove the relationship product-entity
     * Establishes/Removes the relationship of the product with the entity
     * @param productId ID of product (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param entityId ID of entity (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Product apiProductsAddRemEntity(Long productId, String operation, Long entityId) throws ApiException {
        ApiResponse<Product> localVarResp = apiProductsAddRemEntityWithHttpInfo(productId, operation, entityId);
        return localVarResp.getData();
    }

    /**
     * Sets or remove the relationship product-entity
     * Establishes/Removes the relationship of the product with the entity
     * @param productId ID of product (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param entityId ID of entity (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> apiProductsAddRemEntityWithHttpInfo(Long productId, String operation, Long entityId) throws ApiException {
        okhttp3.Call localVarCall = apiProductsAddRemEntityValidateBeforeCall(productId, operation, entityId, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets or remove the relationship product-entity (asynchronously)
     * Establishes/Removes the relationship of the product with the entity
     * @param productId ID of product (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param entityId ID of entity (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsAddRemEntityAsync(Long productId, String operation, Long entityId, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiProductsAddRemEntityValidateBeforeCall(productId, operation, entityId, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiProductsAddRemPerson
     * @param productId ID of product (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param personId ID of person (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsAddRemPersonCall(Long productId, String operation, Long personId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/persons/{operation}/{personId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()))
            .replaceAll("\\{" + "operation" + "\\}", localVarApiClient.escapeString(operation.toString()))
            .replaceAll("\\{" + "personId" + "\\}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiProductsAddRemPersonValidateBeforeCall(Long productId, String operation, Long personId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling apiProductsAddRemPerson(Async)");
        }
        
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling apiProductsAddRemPerson(Async)");
        }
        
        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling apiProductsAddRemPerson(Async)");
        }
        

        okhttp3.Call localVarCall = apiProductsAddRemPersonCall(productId, operation, personId, _callback);
        return localVarCall;

    }

    /**
     * Sets or remove the relationship product-person
     * Establishes/Removes the relationship of the product with the person
     * @param productId ID of product (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param personId ID of person (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Product apiProductsAddRemPerson(Long productId, String operation, Long personId) throws ApiException {
        ApiResponse<Product> localVarResp = apiProductsAddRemPersonWithHttpInfo(productId, operation, personId);
        return localVarResp.getData();
    }

    /**
     * Sets or remove the relationship product-person
     * Establishes/Removes the relationship of the product with the person
     * @param productId ID of product (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param personId ID of person (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> apiProductsAddRemPersonWithHttpInfo(Long productId, String operation, Long personId) throws ApiException {
        okhttp3.Call localVarCall = apiProductsAddRemPersonValidateBeforeCall(productId, operation, personId, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets or remove the relationship product-person (asynchronously)
     * Establishes/Removes the relationship of the product with the person
     * @param productId ID of product (required)
     * @param operation Set the operation to perform: &lt;li&gt;&lt;b&gt;add&lt;/b&gt;: add the relationship &lt;li&gt;&lt;b&gt;rem&lt;/b&gt;: remove the relationship (required)
     * @param personId ID of person (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product is now updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> &#x60;NOT ACCEPTABLE&#x60;: Requested resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiProductsAddRemPersonAsync(Long productId, String operation, Long personId, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiProductsAddRemPersonValidateBeforeCall(productId, operation, personId, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cOptionsProduct
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call cOptionsProductCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cOptionsProductValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = cOptionsProductCall(_callback);
        return localVarCall;

    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public void cOptionsProduct() throws ApiException {
        cOptionsProductWithHttpInfo();
    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> cOptionsProductWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cOptionsProductValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Provides the list of HTTP supported methods. (asynchronously)
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call cOptionsProductAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cOptionsProductValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProduct
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: product created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProductValidateBeforeCall(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createProductCall(UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Creates a Product resource.
     * Creates a new product
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: product created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public Product createProduct(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<Product> localVarResp = createProductWithHttpInfo(UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Creates a Product resource.
     * Creates a new product
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: product created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> createProductWithHttpInfo(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = createProductValidateBeforeCall(UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a Product resource. (asynchronously)
     * Creates a new product
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> &#x60;Created&#x60;: product created </td><td>  * Location -  <br>  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &#x60;FORBIDDEN&#x60;: You don&#39;t have permission to access </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> &#x60;UNPROCESSABLE ENTITY&#x60;: Username, e-mail or password is left out </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createProductAsync(UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProductValidateBeforeCall(UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProduct
     * @param productId ID of product (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductCall(Long productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProductValidateBeforeCall(Long productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling deleteProduct(Async)");
        }
        

        okhttp3.Call localVarCall = deleteProductCall(productId, _callback);
        return localVarCall;

    }

    /**
     * Removes the Product resource.
     * Deletes the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteProduct(Long productId) throws ApiException {
        deleteProductWithHttpInfo(productId);
    }

    /**
     * Removes the Product resource.
     * Deletes the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteProductWithHttpInfo(Long productId) throws ApiException {
        okhttp3.Call localVarCall = deleteProductValidateBeforeCall(productId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes the Product resource. (asynchronously)
     * Deletes the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Product deleted &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProductAsync(Long productId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProductValidateBeforeCall(productId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for existsProduct
     * @param productname Product name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Productname exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call existsProductCall(String productname, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/productname/{productname}"
            .replaceAll("\\{" + "productname" + "\\}", localVarApiClient.escapeString(productname.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call existsProductValidateBeforeCall(String productname, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productname' is set
        if (productname == null) {
            throw new ApiException("Missing the required parameter 'productname' when calling existsProduct(Async)");
        }
        

        okhttp3.Call localVarCall = existsProductCall(productname, _callback);
        return localVarCall;

    }

    /**
     * Determines if productname exists
     * Returns status code 204 if &#x60;productname&#x60; exists.
     * @param productname Product name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Productname exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public void existsProduct(String productname) throws ApiException {
        existsProductWithHttpInfo(productname);
    }

    /**
     * Determines if productname exists
     * Returns status code 204 if &#x60;productname&#x60; exists.
     * @param productname Product name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Productname exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> existsProductWithHttpInfo(String productname) throws ApiException {
        okhttp3.Call localVarCall = existsProductValidateBeforeCall(productname, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Determines if productname exists (asynchronously)
     * Returns status code 204 if &#x60;productname&#x60; exists.
     * @param productname Product name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Productname exists &amp;lt;Response body is empty&amp;gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call existsProductAsync(String productname, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = existsProductValidateBeforeCall(productname, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for optionsProduct
     * @param productId ID of product (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call optionsProductCall(Long productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optionsProductValidateBeforeCall(Long productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling optionsProduct(Async)");
        }
        

        okhttp3.Call localVarCall = optionsProductCall(productId, _callback);
        return localVarCall;

    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param productId ID of product (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public void optionsProduct(Long productId) throws ApiException {
        optionsProductWithHttpInfo(productId);
    }

    /**
     * Provides the list of HTTP supported methods.
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param productId ID of product (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> optionsProductWithHttpInfo(Long productId) throws ApiException {
        okhttp3.Call localVarCall = optionsProductValidateBeforeCall(productId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Provides the list of HTTP supported methods. (asynchronously)
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     * @param productId ID of product (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> &#x60;Allow&#x60; header &amp;lt;Response body is empty&amp;gt; </td><td>  * Allow -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call optionsProductAsync(Long productId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = optionsProductValidateBeforeCall(productId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for readProduct
     * @param productId ID of product (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readProductCall(Long productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readProductValidateBeforeCall(Long productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling readProduct(Async)");
        }
        

        okhttp3.Call localVarCall = readProductCall(productId, _callback);
        return localVarCall;

    }

    /**
     * Retrieves a Product resource based on a single ID.
     * Returns the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public Product readProduct(Long productId) throws ApiException {
        ApiResponse<Product> localVarResp = readProductWithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Product resource based on a single ID.
     * Returns the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> readProductWithHttpInfo(Long productId) throws ApiException {
        okhttp3.Call localVarCall = readProductValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Product resource based on a single ID. (asynchronously)
     * Returns the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readProductAsync(Long productId, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = readProductValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readProductEntities
     * @param productId ID of product (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Entities </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readProductEntitiesCall(Long productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/entities"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readProductEntitiesValidateBeforeCall(Long productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling readProductEntities(Async)");
        }
        

        okhttp3.Call localVarCall = readProductEntitiesCall(productId, _callback);
        return localVarCall;

    }

    /**
     * List of entities related to the product
     * Returns the entities related to the product &#x60;productId&#x60;
     * @param productId ID of product (required)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Entities </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2003 readProductEntities(Long productId) throws ApiException {
        ApiResponse<InlineResponse2003> localVarResp = readProductEntitiesWithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * List of entities related to the product
     * Returns the entities related to the product &#x60;productId&#x60;
     * @param productId ID of product (required)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Entities </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2003> readProductEntitiesWithHttpInfo(Long productId) throws ApiException {
        okhttp3.Call localVarCall = readProductEntitiesValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of entities related to the product (asynchronously)
     * Returns the entities related to the product &#x60;productId&#x60;
     * @param productId ID of product (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Entities </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readProductEntitiesAsync(Long productId, final ApiCallback<InlineResponse2003> _callback) throws ApiException {

        okhttp3.Call localVarCall = readProductEntitiesValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readProductPersons
     * @param productId ID of product (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Persons </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readProductPersonsCall(Long productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/persons"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readProductPersonsValidateBeforeCall(Long productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling readProductPersons(Async)");
        }
        

        okhttp3.Call localVarCall = readProductPersonsCall(productId, _callback);
        return localVarCall;

    }

    /**
     * List of persons related to the product
     * Returns the persons related to the product &#x60;productId&#x60;
     * @param productId ID of product (required)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Persons </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2004 readProductPersons(Long productId) throws ApiException {
        ApiResponse<InlineResponse2004> localVarResp = readProductPersonsWithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * List of persons related to the product
     * Returns the persons related to the product &#x60;productId&#x60;
     * @param productId ID of product (required)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Persons </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2004> readProductPersonsWithHttpInfo(Long productId) throws ApiException {
        okhttp3.Call localVarCall = readProductPersonsValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of persons related to the product (asynchronously)
     * Returns the persons related to the product &#x60;productId&#x60;
     * @param productId ID of product (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Persons </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readProductPersonsAsync(Long productId, final ApiCallback<InlineResponse2004> _callback) throws ApiException {

        okhttp3.Call localVarCall = readProductPersonsValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readProducts
     * @param order &#x60;id&#x60; | &#x60;name&#x60; (optional)
     * @param ordering &#x60;ASC&#x60; | &#x60;DESC&#x60; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of products </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readProductsCall(String order, String ordering, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (ordering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ordering", ordering));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readProductsValidateBeforeCall(String order, String ordering, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = readProductsCall(order, ordering, _callback);
        return localVarCall;

    }

    /**
     * Retrieves the collection of Product resources.
     * Returns all products from the system that the user has access to.
     * @param order &#x60;id&#x60; | &#x60;name&#x60; (optional)
     * @param ordering &#x60;ASC&#x60; | &#x60;DESC&#x60; (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of products </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2002 readProducts(String order, String ordering) throws ApiException {
        ApiResponse<InlineResponse2002> localVarResp = readProductsWithHttpInfo(order, ordering);
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of Product resources.
     * Returns all products from the system that the user has access to.
     * @param order &#x60;id&#x60; | &#x60;name&#x60; (optional)
     * @param ordering &#x60;ASC&#x60; | &#x60;DESC&#x60; (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of products </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2002> readProductsWithHttpInfo(String order, String ordering) throws ApiException {
        okhttp3.Call localVarCall = readProductsValidateBeforeCall(order, ordering, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of Product resources. (asynchronously)
     * Returns all products from the system that the user has access to.
     * @param order &#x60;id&#x60; | &#x60;name&#x60; (optional)
     * @param ordering &#x60;ASC&#x60; | &#x60;DESC&#x60; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of products </td><td>  * ETag -  <br>  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readProductsAsync(String order, String ordering, final ApiCallback<InlineResponse2002> _callback) throws ApiException {

        okhttp3.Call localVarCall = readProductsValidateBeforeCall(order, ordering, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProduct
     * @param productId ID of product (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductCall(Long productId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/products/{productId}"
            .replaceAll("\\{" + "productId" + "\\}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "MiWApiSecurity" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProductValidateBeforeCall(Long productId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling updateProduct(Async)");
        }
        
        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling updateProduct(Async)");
        }
        

        okhttp3.Call localVarCall = updateProductCall(productId, ifMatch, UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * Updates the Product resource.
     * Updates the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @return Product
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public Product updateProduct(Long productId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        ApiResponse<Product> localVarResp = updateProductWithHttpInfo(productId, ifMatch, UNKNOWN_BASE_TYPE);
        return localVarResp.getData();
    }

    /**
     * Updates the Product resource.
     * Updates the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @return ApiResponse&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Product> updateProductWithHttpInfo(Long productId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = updateProductValidateBeforeCall(productId, ifMatch, UNKNOWN_BASE_TYPE, null);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Product resource. (asynchronously)
     * Updates the product identified by &#x60;productId&#x60;.
     * @param productId ID of product (required)
     * @param ifMatch ETag value of the resource you are trying to update (required)
     * @param UNKNOWN_BASE_TYPE &#x60;Element&#x60; data (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> &#x60;Content Returned&#x60;: product previously existed and is now updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &#x60;BAD REQUEST&#x60;: User name or e-mail already exists, or role does not exist </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &#x60;UNAUTHORIZED&#x60;: invalid Authorization header </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> &#x60;NOT FOUND&#x60;: resource not found </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> &#x60;PRECONDITION FAILED&#x60;: one or more conditions given evaluated to false </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProductAsync(Long productId, String ifMatch, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Product> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProductValidateBeforeCall(productId, ifMatch, UNKNOWN_BASE_TYPE, _callback);
        Type localVarReturnType = new TypeToken<Product>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
