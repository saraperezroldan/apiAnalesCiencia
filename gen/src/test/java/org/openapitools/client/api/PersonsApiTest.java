/*
 * üèõÔ∏è TDW - ACiencia REST api
 * [UPM] TDW REST api ACiencia
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: miw.etsisi@upm.es
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.InlineResponse2003;
import org.openapitools.client.model.InlineResponse2006;
import org.openapitools.client.model.InlineResponse2008;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.Person;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PersonsApi
 */
@Ignore
public class PersonsApiTest {

    private final PersonsApi api = new PersonsApi();

    
    /**
     * Sets or remove the relationship person-entity
     *
     * Establishes/Removes the relationship of the person with the entity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiPersonsAddRemEntityTest() throws ApiException {
        Long personId = null;
        String operation = null;
        Long entityId = null;
        Person response = api.apiPersonsAddRemEntity(personId, operation, entityId);

        // TODO: test validations
    }
    
    /**
     * Sets or remove the relationship person-product
     *
     * Establishes/Removes the relationship of the person with the product
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiPersonsAddRemProductTest() throws ApiException {
        Long personId = null;
        String operation = null;
        Long productId = null;
        Person response = api.apiPersonsAddRemProduct(personId, operation, productId);

        // TODO: test validations
    }
    
    /**
     * Creates a Person resource.
     *
     * Creates a new person
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPersonTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Person response = api.createPerson(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Removes the Person resource.
     *
     * Deletes the entity identified by &#x60;personId&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePersonTest() throws ApiException {
        Long personId = null;
        api.deletePerson(personId);

        // TODO: test validations
    }
    
    /**
     * Determines if personname exists
     *
     * Returns status code 204 if &#x60;personname&#x60; exists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void existsPersonTest() throws ApiException {
        String personname = null;
        api.existsPerson(personname);

        // TODO: test validations
    }
    
    /**
     * Provides the list of HTTP supported methods.
     *
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void optionsEntityTest() throws ApiException {
        api.optionsEntity();

        // TODO: test validations
    }
    
    /**
     * Provides the list of HTTP supported methods.
     *
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void optionsPersonTest() throws ApiException {
        Long personId = null;
        api.optionsPerson(personId);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Person resource based on a single ID.
     *
     * Returns the product identified by &#x60;personId&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPersonTest() throws ApiException {
        Long personId = null;
        Person response = api.readPerson(personId);

        // TODO: test validations
    }
    
    /**
     * List of entities related to the person
     *
     * Returns the entities related to the person &#x60;personId&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPersonEntitiesTest() throws ApiException {
        Long personId = null;
        InlineResponse2003 response = api.readPersonEntities(personId);

        // TODO: test validations
    }
    
    /**
     * List of products related to the person
     *
     * Returns the products related to the person &#x60;personId&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPersonProductsTest() throws ApiException {
        Long personId = null;
        InlineResponse2006 response = api.readPersonProducts(personId);

        // TODO: test validations
    }
    
    /**
     * Retrieves the collection of Person resources.
     *
     * Returns all persons from the system that the user has access to.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readPersonsTest() throws ApiException {
        String order = null;
        String ordering = null;
        InlineResponse2008 response = api.readPersons(order, ordering);

        // TODO: test validations
    }
    
    /**
     * Updates the Person resource.
     *
     * Updates the person identified by &#x60;personId&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePersonTest() throws ApiException {
        Long personId = null;
        String ifMatch = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Person response = api.updatePerson(personId, ifMatch, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
}
