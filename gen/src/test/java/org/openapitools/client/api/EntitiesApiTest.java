/*
 * üèõÔ∏è TDW - ACiencia REST api
 * [UPM] TDW REST api ACiencia
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: miw.etsisi@upm.es
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Entity;
import org.openapitools.client.model.InlineResponse2005;
import org.openapitools.client.model.InlineResponse2006;
import org.openapitools.client.model.InlineResponse2007;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EntitiesApi
 */
@Ignore
public class EntitiesApiTest {

    private final EntitiesApi api = new EntitiesApi();

    
    /**
     * Sets or remove the relationship entity-person
     *
     * Establishes/Removes the relationship of the entity with the person
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiEntitiesAddRemPersonTest() throws ApiException {
        Long entityId = null;
        String operation = null;
        Long personId = null;
        Entity response = api.apiEntitiesAddRemPerson(entityId, operation, personId);

        // TODO: test validations
    }
    
    /**
     * Sets or remove the relationship entity-product
     *
     * Establishes/Removes the relationship of the entity with the product
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiEntitiesAddRemProductTest() throws ApiException {
        Long entityId = null;
        String operation = null;
        Long productId = null;
        Entity response = api.apiEntitiesAddRemProduct(entityId, operation, productId);

        // TODO: test validations
    }
    
    /**
     * Provides the list of HTTP supported methods.
     *
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cOptionsEntityTest() throws ApiException {
        api.cOptionsEntity();

        // TODO: test validations
    }
    
    /**
     * Creates a Entity resource.
     *
     * Creates a new entity
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEntityTest() throws ApiException {
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Entity response = api.createEntity(UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
    /**
     * Removes the Entity resource.
     *
     * Deletes the entity identified by &#x60;entityId&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEntityTest() throws ApiException {
        Long entityId = null;
        api.deleteEntity(entityId);

        // TODO: test validations
    }
    
    /**
     * Determines if entityname exists
     *
     * Returns status code 204 if &#x60;entityname&#x60; exists.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void existsEntityTest() throws ApiException {
        String entityname = null;
        api.existsEntity(entityname);

        // TODO: test validations
    }
    
    /**
     * Provides the list of HTTP supported methods.
     *
     * Return a &#x60;Allow&#x60; header with a comma separated list of HTTP supported methods.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void optionsEntityTest() throws ApiException {
        Long entityId = null;
        api.optionsEntity(entityId);

        // TODO: test validations
    }
    
    /**
     * Retrieves the collection of Entity resources.
     *
     * Returns all entities from the system that the user has access to.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readEntitiesTest() throws ApiException {
        String order = null;
        String ordering = null;
        InlineResponse2005 response = api.readEntities(order, ordering);

        // TODO: test validations
    }
    
    /**
     * Retrieves a Entity resource based on a single ID.
     *
     * Returns the product identified by &#x60;entityId&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readEntityTest() throws ApiException {
        Long entityId = null;
        Entity response = api.readEntity(entityId);

        // TODO: test validations
    }
    
    /**
     * List of persons related to the entity
     *
     * Returns the persons related to the entity &#x60;entityId&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readEntityPersonsTest() throws ApiException {
        Long entityId = null;
        InlineResponse2007 response = api.readEntityPersons(entityId);

        // TODO: test validations
    }
    
    /**
     * List of products related to the entity
     *
     * Returns the products related to the entity &#x60;entityId&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readEntityProductsTest() throws ApiException {
        Long entityId = null;
        InlineResponse2006 response = api.readEntityProducts(entityId);

        // TODO: test validations
    }
    
    /**
     * Updates the Entity resource.
     *
     * Updates the product identified by &#x60;entityId&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEntityTest() throws ApiException {
        Long entityId = null;
        String ifMatch = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
        Entity response = api.updateEntity(entityId, ifMatch, UNKNOWN_BASE_TYPE);

        // TODO: test validations
    }
    
}
