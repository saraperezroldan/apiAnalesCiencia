openapi: 3.0.3
info:
  contact:
    email: miw.etsisi@upm.es
    name: M√°ster Universitario en Ingenier√≠a Web
    url: https://miw.etsisi.upm.es/
  description: '[UPM] TDW REST api ACiencia'
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: üèõÔ∏è TDW - ACiencia REST api
  version: 1.4.1
servers:
- description: TDW Production server (uses live data)
  url: http://127.0.0.1:8000/api/v1
tags:
- description: User login
  name: üîê Login
- description: User management
  name: üë• Users
- description: Product management
  name: üí° Products
- description: Entity management
  name: üí° Entities
- description: Person management
  name: üí° Persons
paths:
  /access_token:
    post:
      description: Returns api authorization token (JWT).
      operationId: api_post_login
      requestBody:
        $ref: '#/components/requestBodies/LoginRequestBody'
      responses:
        "200":
          content:
            application/json:
              examples:
                example-1:
                  value:
                    token_type: Bearer
                    expires_in: 14400
                    access_token: <JSON web token>
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: _User access token_
          headers:
            Authorization:
              description: Authorization header with access token
              explode: false
              schema:
                type: string
              style: simple
          links:
            AllEndPoints:
              description: 'The `access_token` value returned in the response must
                be appended to the `Authorization: Bearer ` header in all operations.'
              operationId: '*'
              parameters:
                token: $response.body#/token
        "400":
          content:
            application/json:
              example:
                error: invalid_grant
                error_description: The user‚Äôs password is invalid or expired
              schema:
                $ref: '#/components/schemas/inline_response_400'
          description: Error response
      servers:
      - url: http://127.0.0.1:8000/
      summary: Returns api token
      tags:
      - üîê Login
      x-contentType: application/x-www-form-urlencoded
      x-accepts: application/json
  /users:
    get:
      description: Returns all users from the system that the user has access to.
      operationId: api_users_cget
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: Array of users
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      security:
      - MiWApiSecurity:
        - reader
        - writer
      summary: Retrieves the collection of User resources.
      tags:
      - üë• Users
      x-accepts: application/json
    options:
      description: Return a `Allow` header with a comma separated list of HTTP supported
        methods.
      operationId: api_users_coptions
      responses:
        "204":
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'
      summary: Provides the list of HTTP supported methods.
      tags:
      - üë• Users
      x-accepts: application/json
    post:
      description: Creates a new user
      operationId: api_users_post
      requestBody:
        $ref: '#/components/requestBodies/UserRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: '`Created`: user created'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetUserByUserId:
              description: |
                The `id` value returned in the response can be used as the `userId` parameter in `GET /users/{userId}`.
              operationId: api_users_get
              parameters:
                userId: $response.body#/id
        "400":
          content:
            application/json:
              examples:
                response-400:
                  $ref: '#/components/examples/response-400'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`BAD REQUEST`: User name or e-mail already exists, or role
            does not exist'
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "403":
          content:
            application/json:
              examples:
                response-403:
                  $ref: '#/components/examples/response-403'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`FORBIDDEN`: You don''t have permission to access'
        "422":
          content:
            application/json:
              examples:
                response-422:
                  $ref: '#/components/examples/response-422'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNPROCESSABLE ENTITY`: Username, e-mail or password is left
            out'
      security:
      - MiWApiSecurity:
        - writer
      summary: Creates a User resource.
      tags:
      - üë• Users
      x-contentType: application/json
      x-accepts: application/json
  /users/{userId}:
    delete:
      description: Deletes the user identified by `userId`.
      operationId: api_users_delete
      parameters:
      - description: ID of user
        explode: false
        in: path
        name: userId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "204":
          description: User deleted &lt;Response body is empty&gt;
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      security:
      - MiWApiSecurity:
        - writer
      summary: Removes the User resource.
      tags:
      - üë• Users
      x-accepts: application/json
    get:
      description: Returns the user identified by `userId`.
      operationId: api_users_get
      parameters:
      - description: ID of user
        explode: false
        in: path
        name: userId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      security:
      - MiWApiSecurity:
        - reader
        - writer
      summary: Retrieves a User resource based on a single ID.
      tags:
      - üë• Users
      x-accepts: application/json
    options:
      description: Return a `Allow` header with a comma separated list of HTTP supported
        methods.
      operationId: api_users_options_id
      parameters:
      - description: ID of user
        explode: false
        in: path
        name: userId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "204":
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'
      summary: Provides the list of HTTP supported methods.
      tags:
      - üë• Users
      x-accepts: application/json
    put:
      description: |
        Updates the user identified by `userId`.
        - a `reader` user can only modify their own properties
        - a `reader` user cannot modify his role
      operationId: api_users_put
      parameters:
      - description: ID of user
        explode: false
        in: path
        name: userId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      - description: ETag value of the resource you are trying to update
        explode: false
        in: header
        name: If-Match
        required: true
        schema:
          pattern: '[0-9a-f]*'
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/UserRequestBody'
      responses:
        "209":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: '`Content Returned`: user previously existed and is now updated'
        "400":
          content:
            application/json:
              examples:
                response-400:
                  $ref: '#/components/examples/response-400'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`BAD REQUEST`: User name or e-mail already exists, or role
            does not exist'
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
        "412":
          content:
            application/json:
              examples:
                response-412:
                  $ref: '#/components/examples/response-412'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`PRECONDITION FAILED`: one or more conditions given evaluated
            to false'
      security:
      - MiWApiSecurity:
        - reader
        - writer
      summary: Updates the User resource.
      tags:
      - üë• Users
      x-contentType: application/json
      x-accepts: application/json
  /users/username/{username}:
    get:
      description: Returns status code 204 if `username` exists.
      operationId: api_get_user_name
      parameters:
      - description: User name
        explode: false
        in: path
        name: username
        required: true
        schema:
          pattern: ^[a-zA-Z0-9()√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë %$\.+-]+$
          type: string
        style: simple
      responses:
        "204":
          description: Username exists &lt;Response body is empty&gt;
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      summary: Determines if username exists
      tags:
      - üë• Users
      x-accepts: application/json
  /products:
    get:
      description: Returns all products from the system that the user has access to.
      operationId: readProducts
      parameters:
      - allowEmptyValue: false
        description: '`id` | `name`'
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - id
          - name
          type: string
        style: form
      - allowEmptyValue: false
        description: '`ASC` | `DESC`'
        explode: true
        in: query
        name: ordering
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
          description: Array of products
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      summary: Retrieves the collection of Product resources.
      tags:
      - üí° Products
      x-accepts: application/json
    options:
      description: Return a `Allow` header with a comma separated list of HTTP supported
        methods.
      operationId: cOptionsProduct
      responses:
        "204":
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'
      summary: Provides the list of HTTP supported methods.
      tags:
      - üí° Products
      x-accepts: application/json
    post:
      description: Creates a new product
      operationId: createProduct
      requestBody:
        $ref: '#/components/requestBodies/ElementRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: '`Created`: product created'
          headers:
            Location:
              $ref: '#/components/headers/Location'
        "400":
          content:
            application/json:
              examples:
                response-400:
                  $ref: '#/components/examples/response-400'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`BAD REQUEST`: User name or e-mail already exists, or role
            does not exist'
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "403":
          content:
            application/json:
              examples:
                response-403:
                  $ref: '#/components/examples/response-403'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`FORBIDDEN`: You don''t have permission to access'
        "422":
          content:
            application/json:
              examples:
                response-422:
                  $ref: '#/components/examples/response-422'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNPROCESSABLE ENTITY`: Username, e-mail or password is left
            out'
      security:
      - MiWApiSecurity:
        - writer
      summary: Creates a Product resource.
      tags:
      - üí° Products
      x-contentType: application/json
      x-accepts: application/json
  /products/{productId}:
    delete:
      description: Deletes the product identified by `productId`.
      operationId: deleteProduct
      parameters:
      - description: ID of product
        explode: false
        in: path
        name: productId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "204":
          description: Product deleted &lt;Response body is empty&gt;
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      security:
      - MiWApiSecurity:
        - writer
      summary: Removes the Product resource.
      tags:
      - üí° Products
      x-accepts: application/json
    get:
      description: Returns the product identified by `productId`.
      operationId: readProduct
      parameters:
      - description: ID of product
        explode: false
        in: path
        name: productId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: Product
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      summary: Retrieves a Product resource based on a single ID.
      tags:
      - üí° Products
      x-accepts: application/json
    options:
      description: Return a `Allow` header with a comma separated list of HTTP supported
        methods.
      operationId: optionsProduct
      parameters:
      - description: ID of product
        explode: false
        in: path
        name: productId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "204":
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'
      summary: Provides the list of HTTP supported methods.
      tags:
      - üí° Products
      x-accepts: application/json
    put:
      description: Updates the product identified by `productId`.
      operationId: updateProduct
      parameters:
      - description: ID of product
        explode: false
        in: path
        name: productId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      - description: ETag value of the resource you are trying to update
        explode: false
        in: header
        name: If-Match
        required: true
        schema:
          pattern: '[0-9a-f]*'
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ElementRequestBody'
      responses:
        "209":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: '`Content Returned`: product previously existed and is now
            updated'
        "400":
          content:
            application/json:
              examples:
                response-400:
                  $ref: '#/components/examples/response-400'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`BAD REQUEST`: User name or e-mail already exists, or role
            does not exist'
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
        "412":
          content:
            application/json:
              examples:
                response-412:
                  $ref: '#/components/examples/response-412'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`PRECONDITION FAILED`: one or more conditions given evaluated
            to false'
      security:
      - MiWApiSecurity:
        - writer
      summary: Updates the Product resource.
      tags:
      - üí° Products
      x-contentType: application/json
      x-accepts: application/json
  /products/productname/{productname}:
    get:
      description: Returns status code 204 if `productname` exists.
      operationId: existsProduct
      parameters:
      - description: Product name
        explode: false
        in: path
        name: productname
        required: true
        schema:
          pattern: ^[a-zA-Z0-9()√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë %$\.+-]+$
          type: string
        style: simple
      responses:
        "204":
          description: Productname exists &lt;Response body is empty&gt;
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      summary: Determines if productname exists
      tags:
      - üí° Products
      x-accepts: application/json
  /products/{productId}/entities:
    get:
      description: Returns the entities related to the product `productId`
      operationId: readProductEntities
      parameters:
      - description: ID of product
        explode: false
        in: path
        name: productId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
          description: Array of Entities
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      summary: List of entities related to the product
      tags:
      - üí° Products
      x-accepts: application/json
  /products/{productId}/persons:
    get:
      description: Returns the persons related to the product `productId`
      operationId: readProductPersons
      parameters:
      - description: ID of product
        explode: false
        in: path
        name: productId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
          description: Array of Persons
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      summary: List of persons related to the product
      tags:
      - üí° Products
      x-accepts: application/json
  /products/{productId}/entities/{operation}/{entityId}:
    put:
      description: Establishes/Removes the relationship of the product with the entity
      operationId: api_products_add_rem_entity
      parameters:
      - description: ID of product
        explode: false
        in: path
        name: productId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      - description: |-
          Set the operation to perform:
          <li><b>add</b>: add the relationship
          <li><b>rem</b>: remove the relationship
        explode: false
        in: path
        name: operation
        required: true
        schema:
          enum:
          - add
          - rem
          type: string
        style: simple
      - description: ID of entity
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "209":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: '`Content Returned`: product is now updated'
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "403":
          content:
            application/json:
              examples:
                response-403:
                  $ref: '#/components/examples/response-403'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`FORBIDDEN`: You don''t have permission to access'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
        "406":
          content:
            application/json:
              examples:
                response-406:
                  $ref: '#/components/examples/response-406'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT ACCEPTABLE`: Requested resource not found'
      security:
      - MiWApiSecurity:
        - writer
      summary: Sets or remove the relationship product-entity
      tags:
      - üí° Products
      x-accepts: application/json
  /products/{productId}/persons/{operation}/{personId}:
    put:
      description: Establishes/Removes the relationship of the product with the person
      operationId: api_products_add_rem_person
      parameters:
      - description: ID of product
        explode: false
        in: path
        name: productId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      - description: |-
          Set the operation to perform:
          <li><b>add</b>: add the relationship
          <li><b>rem</b>: remove the relationship
        explode: false
        in: path
        name: operation
        required: true
        schema:
          enum:
          - add
          - rem
          type: string
        style: simple
      - description: ID of person
        explode: false
        in: path
        name: personId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "209":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: '`Content Returned`: product is now updated'
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "403":
          content:
            application/json:
              examples:
                response-403:
                  $ref: '#/components/examples/response-403'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`FORBIDDEN`: You don''t have permission to access'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
        "406":
          content:
            application/json:
              examples:
                response-406:
                  $ref: '#/components/examples/response-406'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT ACCEPTABLE`: Requested resource not found'
      security:
      - MiWApiSecurity:
        - writer
      summary: Sets or remove the relationship product-person
      tags:
      - üí° Products
      x-accepts: application/json
  /entities:
    get:
      description: Returns all entities from the system that the user has access to.
      operationId: readEntities
      parameters:
      - allowEmptyValue: false
        description: '`id` | `name`'
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - id
          - name
          type: string
        style: form
      - allowEmptyValue: false
        description: '`ASC` | `DESC`'
        explode: true
        in: query
        name: ordering
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
          description: Array of entities
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      summary: Retrieves the collection of Entity resources.
      tags:
      - üí° Entities
      x-accepts: application/json
    options:
      description: Return a `Allow` header with a comma separated list of HTTP supported
        methods.
      operationId: cOptionsEntity
      responses:
        "204":
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'
      summary: Provides the list of HTTP supported methods.
      tags:
      - üí° Entities
      x-accepts: application/json
    post:
      description: Creates a new entity
      operationId: createEntity
      requestBody:
        $ref: '#/components/requestBodies/ElementRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          description: '`Created`: entity created'
          headers:
            Location:
              $ref: '#/components/headers/Location'
        "400":
          content:
            application/json:
              examples:
                response-400:
                  $ref: '#/components/examples/response-400'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`BAD REQUEST`: User name or e-mail already exists, or role
            does not exist'
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "403":
          content:
            application/json:
              examples:
                response-403:
                  $ref: '#/components/examples/response-403'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`FORBIDDEN`: You don''t have permission to access'
        "422":
          content:
            application/json:
              examples:
                response-422:
                  $ref: '#/components/examples/response-422'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNPROCESSABLE ENTITY`: Username, e-mail or password is left
            out'
      security:
      - MiWApiSecurity:
        - writer
      summary: Creates a Entity resource.
      tags:
      - üí° Entities
      x-contentType: application/json
      x-accepts: application/json
  /entities/{entityId}:
    delete:
      description: Deletes the entity identified by `entityId`.
      operationId: deleteEntity
      parameters:
      - description: ID of entity
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "204":
          description: Entity deleted &lt;Response body is empty&gt;
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      security:
      - MiWApiSecurity:
        - writer
      summary: Removes the Entity resource.
      tags:
      - üí° Entities
      x-accepts: application/json
    get:
      description: Returns the product identified by `entityId`.
      operationId: readEntity
      parameters:
      - description: ID of entity
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          description: Entity
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      summary: Retrieves a Entity resource based on a single ID.
      tags:
      - üí° Entities
      x-accepts: application/json
    options:
      description: Return a `Allow` header with a comma separated list of HTTP supported
        methods.
      operationId: optionsEntity
      parameters:
      - description: ID of entity
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "204":
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'
      summary: Provides the list of HTTP supported methods.
      tags:
      - üí° Entities
      x-accepts: application/json
    put:
      description: Updates the product identified by `entityId`.
      operationId: updateEntity
      parameters:
      - description: ID of entity
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      - description: ETag value of the resource you are trying to update
        explode: false
        in: header
        name: If-Match
        required: true
        schema:
          pattern: '[0-9a-f]*'
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ElementRequestBody'
      responses:
        "209":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          description: '`Content Returned`: entity previously existed and is now updated'
        "400":
          content:
            application/json:
              examples:
                response-400:
                  $ref: '#/components/examples/response-400'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`BAD REQUEST`: User name or e-mail already exists, or role
            does not exist'
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
        "412":
          content:
            application/json:
              examples:
                response-412:
                  $ref: '#/components/examples/response-412'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`PRECONDITION FAILED`: one or more conditions given evaluated
            to false'
      security:
      - MiWApiSecurity:
        - writer
      summary: Updates the Entity resource.
      tags:
      - üí° Entities
      x-contentType: application/json
      x-accepts: application/json
  /entities/entityname/{entityname}:
    get:
      description: Returns status code 204 if `entityname` exists.
      operationId: existsEntity
      parameters:
      - description: Entity name
        explode: false
        in: path
        name: entityname
        required: true
        schema:
          pattern: ^[a-zA-Z0-9()√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë %$\.+-]+$
          type: string
        style: simple
      responses:
        "204":
          description: Entityname exists &lt;Response body is empty&gt;
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      summary: Determines if entityname exists
      tags:
      - üí° Entities
      x-accepts: application/json
  /entities/{entityId}/products:
    get:
      description: Returns the products related to the entity `entityId`
      operationId: readEntityProducts
      parameters:
      - description: ID of entity
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
          description: Array of Products
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      summary: List of products related to the entity
      tags:
      - üí° Entities
      x-accepts: application/json
  /entities/{entityId}/persons:
    get:
      description: Returns the persons related to the entity `entityId`
      operationId: readEntityPersons
      parameters:
      - description: ID of entity
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_7'
          description: Array of Persons
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      summary: List of persons related to the entity
      tags:
      - üí° Entities
      x-accepts: application/json
  /entities/{entityId}/products/{operation}/{productId}:
    put:
      description: Establishes/Removes the relationship of the entity with the product
      operationId: api_entities_add_rem_product
      parameters:
      - description: ID of entity
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      - description: |-
          Set the operation to perform:
          <li><b>add</b>: add the relationship
          <li><b>rem</b>: remove the relationship
        explode: false
        in: path
        name: operation
        required: true
        schema:
          enum:
          - add
          - rem
          type: string
        style: simple
      - description: ID of product
        explode: false
        in: path
        name: productId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "209":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          description: '`Content Returned`: entity is now updated'
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "403":
          content:
            application/json:
              examples:
                response-403:
                  $ref: '#/components/examples/response-403'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`FORBIDDEN`: You don''t have permission to access'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
        "406":
          content:
            application/json:
              examples:
                response-406:
                  $ref: '#/components/examples/response-406'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT ACCEPTABLE`: Requested resource not found'
      security:
      - MiWApiSecurity:
        - writer
      summary: Sets or remove the relationship entity-product
      tags:
      - üí° Entities
      x-accepts: application/json
  /entities/{entityId}/persons/{operation}/{personId}:
    put:
      description: Establishes/Removes the relationship of the entity with the person
      operationId: api_entities_add_rem_person
      parameters:
      - description: ID of entity
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      - description: |-
          Set the operation to perform:
          <li><b>add</b>: add the relationship
          <li><b>rem</b>: remove the relationship
        explode: false
        in: path
        name: operation
        required: true
        schema:
          enum:
          - add
          - rem
          type: string
        style: simple
      - description: ID of person
        explode: false
        in: path
        name: personId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "209":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
          description: '`Content Returned`: entity is now updated'
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "403":
          content:
            application/json:
              examples:
                response-403:
                  $ref: '#/components/examples/response-403'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`FORBIDDEN`: You don''t have permission to access'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
        "406":
          content:
            application/json:
              examples:
                response-406:
                  $ref: '#/components/examples/response-406'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT ACCEPTABLE`: Requested resource not found'
      security:
      - MiWApiSecurity:
        - writer
      summary: Sets or remove the relationship entity-person
      tags:
      - üí° Entities
      x-accepts: application/json
  /persons:
    get:
      description: Returns all persons from the system that the user has access to.
      operationId: readPersons
      parameters:
      - allowEmptyValue: false
        description: '`id` | `name`'
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - id
          - name
          type: string
        style: form
      - allowEmptyValue: false
        description: '`ASC` | `DESC`'
        explode: true
        in: query
        name: ordering
        required: false
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_8'
          description: Array of persons
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      summary: Retrieves the collection of Person resources.
      tags:
      - üí° Persons
      x-accepts: application/json
    options:
      description: Return a `Allow` header with a comma separated list of HTTP supported
        methods.
      operationId: OptionsEntity
      responses:
        "204":
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'
      summary: Provides the list of HTTP supported methods.
      tags:
      - üí° Persons
      x-accepts: application/json
    post:
      description: Creates a new person
      operationId: createPerson
      requestBody:
        $ref: '#/components/requestBodies/ElementRequestBody'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: '`Created`: person created'
          headers:
            Location:
              $ref: '#/components/headers/Location'
        "400":
          content:
            application/json:
              examples:
                response-400:
                  $ref: '#/components/examples/response-400'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`BAD REQUEST`: User name or e-mail already exists, or role
            does not exist'
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "403":
          content:
            application/json:
              examples:
                response-403:
                  $ref: '#/components/examples/response-403'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`FORBIDDEN`: You don''t have permission to access'
        "422":
          content:
            application/json:
              examples:
                response-422:
                  $ref: '#/components/examples/response-422'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNPROCESSABLE ENTITY`: Username, e-mail or password is left
            out'
      security:
      - MiWApiSecurity:
        - writer
      summary: Creates a Person resource.
      tags:
      - üí° Persons
      x-contentType: application/json
      x-accepts: application/json
  /persons/{personId}:
    delete:
      description: Deletes the entity identified by `personId`.
      operationId: deletePerson
      parameters:
      - description: ID of person
        explode: false
        in: path
        name: personId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "204":
          description: Person deleted &lt;Response body is empty&gt;
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      security:
      - MiWApiSecurity:
        - writer
      summary: Removes the Person resource.
      tags:
      - üí° Persons
      x-accepts: application/json
    get:
      description: Returns the product identified by `personId`.
      operationId: readPerson
      parameters:
      - description: ID of person
        explode: false
        in: path
        name: personId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: Person
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      summary: Retrieves a Person resource based on a single ID.
      tags:
      - üí° Persons
      x-accepts: application/json
    options:
      description: Return a `Allow` header with a comma separated list of HTTP supported
        methods.
      operationId: optionsPerson
      parameters:
      - description: ID of person
        explode: false
        in: path
        name: personId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "204":
          description: '`Allow` header &lt;Response body is empty&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow'
      summary: Provides the list of HTTP supported methods.
      tags:
      - üí° Persons
      x-accepts: application/json
    put:
      description: Updates the person identified by `personId`.
      operationId: updatePerson
      parameters:
      - description: ID of person
        explode: false
        in: path
        name: personId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      - description: ETag value of the resource you are trying to update
        explode: false
        in: header
        name: If-Match
        required: true
        schema:
          pattern: '[0-9a-f]*'
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/ElementRequestBody'
      responses:
        "209":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: '`Content Returned`: person previously existed and is now updated'
        "400":
          content:
            application/json:
              examples:
                response-400:
                  $ref: '#/components/examples/response-400'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`BAD REQUEST`: User name or e-mail already exists, or role
            does not exist'
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
        "412":
          content:
            application/json:
              examples:
                response-412:
                  $ref: '#/components/examples/response-412'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`PRECONDITION FAILED`: one or more conditions given evaluated
            to false'
      security:
      - MiWApiSecurity:
        - writer
      summary: Updates the Person resource.
      tags:
      - üí° Persons
      x-contentType: application/json
      x-accepts: application/json
  /persons/personname/{personname}:
    get:
      description: Returns status code 204 if `personname` exists.
      operationId: existsPerson
      parameters:
      - description: Person name
        explode: false
        in: path
        name: personname
        required: true
        schema:
          pattern: ^[a-zA-Z0-9()√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë %$\.+-]+$
          type: string
        style: simple
      responses:
        "204":
          description: Personname exists &lt;Response body is empty&gt;
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      summary: Determines if personname exists
      tags:
      - üí° Persons
      x-accepts: application/json
  /persons/{personId}/products:
    get:
      description: Returns the products related to the person `personId`
      operationId: readPersonProducts
      parameters:
      - description: ID of person
        explode: false
        in: path
        name: personId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
          description: Array of Products
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      summary: List of products related to the person
      tags:
      - üí° Persons
      x-accepts: application/json
  /persons/{personId}/entities:
    get:
      description: Returns the entities related to the person `personId`
      operationId: readPersonEntities
      parameters:
      - description: ID of person
        explode: false
        in: path
        name: personId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
          description: Array of Entities
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
      summary: List of entities related to the person
      tags:
      - üí° Persons
      x-accepts: application/json
  /persons/{personId}/products/{operation}/{productId}:
    put:
      description: Establishes/Removes the relationship of the person with the product
      operationId: api_persons_add_rem_product
      parameters:
      - description: ID of person
        explode: false
        in: path
        name: personId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      - description: |-
          Set the operation to perform:
          <li><b>add</b>: add the relationship
          <li><b>rem</b>: remove the relationship
        explode: false
        in: path
        name: operation
        required: true
        schema:
          enum:
          - add
          - rem
          type: string
        style: simple
      - description: ID of product
        explode: false
        in: path
        name: productId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "209":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: '`Content Returned`: person is now updated'
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "403":
          content:
            application/json:
              examples:
                response-403:
                  $ref: '#/components/examples/response-403'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`FORBIDDEN`: You don''t have permission to access'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
        "406":
          content:
            application/json:
              examples:
                response-406:
                  $ref: '#/components/examples/response-406'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT ACCEPTABLE`: Requested resource not found'
      security:
      - MiWApiSecurity:
        - writer
      summary: Sets or remove the relationship person-product
      tags:
      - üí° Persons
      x-accepts: application/json
  /persons/{personId}/entities/{operation}/{entityId}:
    put:
      description: Establishes/Removes the relationship of the person with the entity
      operationId: api_persons_add_rem_entity
      parameters:
      - description: ID of person
        explode: false
        in: path
        name: personId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      - description: |-
          Set the operation to perform:
          <li><b>add</b>: add the relationship
          <li><b>rem</b>: remove the relationship
        explode: false
        in: path
        name: operation
        required: true
        schema:
          enum:
          - add
          - rem
          type: string
        style: simple
      - description: ID of entity
        explode: false
        in: path
        name: entityId
        required: true
        schema:
          format: int64
          pattern: ^\d+$
          type: integer
        style: simple
      responses:
        "209":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: '`Content Returned`: person is now updated'
        "401":
          content:
            application/json:
              examples:
                response-401:
                  $ref: '#/components/examples/response-401'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`UNAUTHORIZED`: invalid Authorization header'
        "403":
          content:
            application/json:
              examples:
                response-403:
                  $ref: '#/components/examples/response-403'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`FORBIDDEN`: You don''t have permission to access'
        "404":
          content:
            application/json:
              examples:
                response-404:
                  $ref: '#/components/examples/response-404'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT FOUND`: resource not found'
        "406":
          content:
            application/json:
              examples:
                response-406:
                  $ref: '#/components/examples/response-406'
              schema:
                $ref: '#/components/schemas/Message'
          description: '`NOT ACCEPTABLE`: Requested resource not found'
      security:
      - MiWApiSecurity:
        - writer
      summary: Sets or remove the relationship person-entity
      tags:
      - üí° Persons
      x-accepts: application/json
components:
  examples:
    response-400:
      value:
        code: 400
        message: 'BAD REQUEST: name or e-mail already exists'
    response-401:
      value:
        code: 401
        message: 'UNAUTHORIZED: invalid Authorization header'
    response-403:
      value:
        code: 403
        message: 'FORBIDDEN: You don''t have permission to access'
    response-404:
      value:
        code: 404
        message: 'NOT FOUND: Resource not found (or you don''t have permission to
          access)'
    response-406:
      value:
        code: 406
        message: 'NOT ACCEPTABLE: Requested resource not found'
    response-412:
      value:
        code: 412
        message: 'PRECONDITION FAILED: one or more conditions given evaluated to false'
    response-422:
      value:
        code: 422
        message: 'UNPROCESSABLE ENTITY: name, e-mail or password is left out'
  headers:
    ETag:
      description: Entity Tag (unique identifier provided for cache validation)
      explode: false
      schema:
        pattern: '[0-9a-f]*'
        type: string
      style: simple
    Location:
      description: '`URI` of the new resource'
      explode: false
      schema:
        format: url
        type: string
      style: simple
    Allow:
      description: List of HTTP supported methods
      explode: false
      schema:
        type: string
      style: simple
  parameters:
    userId:
      description: ID of user
      explode: false
      in: path
      name: userId
      required: true
      schema:
        format: int64
        pattern: ^\d+$
        type: integer
      style: simple
    productId:
      description: ID of product
      explode: false
      in: path
      name: productId
      required: true
      schema:
        format: int64
        pattern: ^\d+$
        type: integer
      style: simple
    personId:
      description: ID of person
      explode: false
      in: path
      name: personId
      required: true
      schema:
        format: int64
        pattern: ^\d+$
        type: integer
      style: simple
    entityId:
      description: ID of entity
      explode: false
      in: path
      name: entityId
      required: true
      schema:
        format: int64
        pattern: ^\d+$
        type: integer
      style: simple
    username:
      description: User name
      explode: false
      in: path
      name: username
      required: true
      schema:
        pattern: ^[a-zA-Z0-9()√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë %$\.+-]+$
        type: string
      style: simple
    productName:
      description: Product name
      explode: false
      in: path
      name: productname
      required: true
      schema:
        pattern: ^[a-zA-Z0-9()√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë %$\.+-]+$
        type: string
      style: simple
    personName:
      description: Person name
      explode: false
      in: path
      name: personname
      required: true
      schema:
        pattern: ^[a-zA-Z0-9()√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë %$\.+-]+$
        type: string
      style: simple
    entityName:
      description: Entity name
      explode: false
      in: path
      name: entityname
      required: true
      schema:
        pattern: ^[a-zA-Z0-9()√°√©√≠√≥√∫√Å√â√ç√ì√ö√±√ë %$\.+-]+$
        type: string
      style: simple
    orderParam:
      allowEmptyValue: false
      description: '`id` | `name`'
      explode: true
      in: query
      name: order
      required: false
      schema:
        enum:
        - id
        - name
        type: string
      style: form
    orderingParam:
      allowEmptyValue: false
      description: '`ASC` | `DESC`'
      explode: true
      in: query
      name: ordering
      required: false
      schema:
        enum:
        - ASC
        - DESC
        type: string
      style: form
    ifMatchParam:
      description: ETag value of the resource you are trying to update
      explode: false
      in: header
      name: If-Match
      required: true
      schema:
        pattern: '[0-9a-f]*'
        type: string
      style: simple
    operationParam:
      description: |-
        Set the operation to perform:
        <li><b>add</b>: add the relationship
        <li><b>rem</b>: remove the relationship
      explode: false
      in: path
      name: operation
      required: true
      schema:
        enum:
        - add
        - rem
        type: string
      style: simple
  requestBodies:
    UserRequestBody:
      content:
        application/json:
          schema:
            example:
              username: username
              email: User_email@example.com
              password: User_password
              role: reader
            properties:
              username:
                description: User name
                type: string
              email:
                description: User email
                format: email
                type: string
              password:
                description: User password
                format: password
                type: string
              role:
                default: reader
                description: User role
                enum:
                - reader
                - writer
                type: string
            required:
            - email
            - password
            - username
            type: object
      description: '`User` data'
      required: true
    LoginRequestBody:
      content:
        application/x-www-form-urlencoded:
          schema:
            properties:
              username:
                description: User name
                type: string
              password:
                description: User password
                format: password
                type: string
              scope:
                description: Requested scopes
                enum:
                - reader
                - reader+writer
                type: string
            required:
            - password
            - username
            type: object
        application/json:
          schema:
            properties:
              username:
                description: User name
                type: string
              password:
                description: User password
                format: password
                type: string
              scope:
                default: reader
                description: Requested scopes
                enum:
                - reader
                - reader+writer
                type: string
            required:
            - password
            - username
            type: object
      description: Registered **username** and **password**
      required: true
    ElementRequestBody:
      content:
        application/json:
          schema:
            properties:
              name:
                maxLength: 80
                type: string
              birthDate:
                format: date
                type: string
              deathDate:
                format: date
                type: string
              imageUrl:
                format: url
                maxLength: 2047
                type: string
              wikiUrl:
                format: url
                maxLength: 2047
                type: string
            required:
            - name
            type: object
      description: '`Element` data'
  responses:
    Response_400:
      content:
        application/json:
          examples:
            response-400:
              $ref: '#/components/examples/response-400'
          schema:
            $ref: '#/components/schemas/Message'
      description: '`BAD REQUEST`: User name or e-mail already exists, or role does
        not exist'
    Response_401:
      content:
        application/json:
          examples:
            response-401:
              $ref: '#/components/examples/response-401'
          schema:
            $ref: '#/components/schemas/Message'
      description: '`UNAUTHORIZED`: invalid Authorization header'
    Response_403:
      content:
        application/json:
          examples:
            response-403:
              $ref: '#/components/examples/response-403'
          schema:
            $ref: '#/components/schemas/Message'
      description: '`FORBIDDEN`: You don''t have permission to access'
    Response_404:
      content:
        application/json:
          examples:
            response-404:
              $ref: '#/components/examples/response-404'
          schema:
            $ref: '#/components/schemas/Message'
      description: '`NOT FOUND`: resource not found'
    Response_406:
      content:
        application/json:
          examples:
            response-406:
              $ref: '#/components/examples/response-406'
          schema:
            $ref: '#/components/schemas/Message'
      description: '`NOT ACCEPTABLE`: Requested resource not found'
    Response_412:
      content:
        application/json:
          examples:
            response-412:
              $ref: '#/components/examples/response-412'
          schema:
            $ref: '#/components/schemas/Message'
      description: '`PRECONDITION FAILED`: one or more conditions given evaluated
        to false'
    Response_422:
      content:
        application/json:
          examples:
            response-422:
              $ref: '#/components/examples/response-422'
          schema:
            $ref: '#/components/schemas/Message'
      description: '`UNPROCESSABLE ENTITY`: Username, e-mail or password is left out'
  schemas:
    User:
      example:
        user:
          id: 1508
          username: user1508
          email: miw.etsisi@upm.es
          role: reader
      properties:
        id:
          description: User Id
          format: int64
          readOnly: true
          type: integer
        username:
          description: User name
          type: string
        email:
          description: User email
          format: email
          type: string
        role:
          default: reader
          description: User role
          enum:
          - reader
          - writer
          type: string
      type: object
      x-examples:
        example-1:
          user:
            id: 1508
            username: user1508
            email: miw.etsisi@upm.es
            role: reader
    Element:
      properties:
        id:
          description: Element Id
          format: int64
          readOnly: true
          type: integer
        name:
          maxLength: 80
          type: string
        birthDate:
          format: date
          type: string
        deathDate:
          format: date
          type: string
        imageUrl:
          format: url
          maxLength: 2047
          type: string
        wikiUrl:
          format: url
          maxLength: 2047
          type: string
      required:
      - name
      type: object
    Product:
      allOf:
      - $ref: '#/components/schemas/Element'
      - type: object
      - $ref: '#/components/schemas/Product_allOf'
      example:
        product:
          id: 7
          name: Product07
          birthDate: 2020-01-01
          deathDate: 2250-12-25
          imageUrl: https://image07.example.com/
          wikiUrl: https://wiki07.example.com/
          persons:
          - 3
          - 17
          entities:
          - 2
    Person:
      allOf:
      - $ref: '#/components/schemas/Element'
      - type: object
      - $ref: '#/components/schemas/Person_allOf'
      example:
        person:
          id: 17
          name: Person17
          birthDate: 2017-07-17
          deathDate: 2701-01-07
          imageUrl: https://image17.example.com/
          wikiUrl: https://wiki17.example.com/
          products:
          - 1
          - 7
          entities:
          - 2
    Entity:
      allOf:
      - $ref: '#/components/schemas/Element'
      - type: object
      - $ref: '#/components/schemas/Entity_allOf'
      example:
        entity:
          id: 2
          name: Entity02
          birthDate: 1936-07-18
          deathDate: 1939-04-01
          imageUrl: https://image02.example.com/
          wikiUrl: https://wiki02.example.com/
          products:
          - 1
          - 7
          persons:
          - 3
          - 17
    Message:
      description: HTTP response message
      properties:
        code:
          description: Response code
          format: int64
          type: integer
        message:
          description: Response message
          type: string
      type: object
    inline_response_200:
      example:
        access_token: access_token
        token_type: Bearer
        expires_in: 0
      properties:
        token_type:
          default: Bearer
          type: string
        expires_in:
          default: 14400
          description: Max lifetime in seconds
          type: integer
        access_token:
          description: JSON web token
          type: string
      type: object
    inline_response_400:
      properties:
        error:
          default: invalid_grant
          type: string
        error_description:
          type: string
      type: object
    inline_response_200_1:
      example:
        users:
        - user:
            id: 1508
            username: user1508
            email: miw.etsisi@upm.es
            role: reader
        - user:
            id: 1508
            username: user1508
            email: miw.etsisi@upm.es
            role: reader
      properties:
        users:
          description: Users array
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    inline_response_200_2:
      example:
        products:
        - product:
            id: 7
            name: Product07
            birthDate: 2020-01-01
            deathDate: 2250-12-25
            imageUrl: https://image07.example.com/
            wikiUrl: https://wiki07.example.com/
            persons:
            - 3
            - 17
            entities:
            - 2
        - product:
            id: 7
            name: Product07
            birthDate: 2020-01-01
            deathDate: 2250-12-25
            imageUrl: https://image07.example.com/
            wikiUrl: https://wiki07.example.com/
            persons:
            - 3
            - 17
            entities:
            - 2
      properties:
        products:
          description: Products array
          items:
            $ref: '#/components/schemas/Product'
          type: array
      type: object
    inline_response_200_3:
      example:
        entities:
        - entity:
            id: 2
            name: Entity02
            birthDate: 1936-07-18
            deathDate: 1939-04-01
            imageUrl: https://image02.example.com/
            wikiUrl: https://wiki02.example.com/
            products:
            - 1
            - 7
            persons:
            - 3
            - 17
        - entity:
            id: 2
            name: Entity02
            birthDate: 1936-07-18
            deathDate: 1939-04-01
            imageUrl: https://image02.example.com/
            wikiUrl: https://wiki02.example.com/
            products:
            - 1
            - 7
            persons:
            - 3
            - 17
      properties:
        entities:
          description: Entity array
          items:
            $ref: '#/components/schemas/Entity'
          type: array
      type: object
    inline_response_200_4:
      example:
        persons:
        - person:
            id: 17
            name: Person17
            birthDate: 2017-07-17
            deathDate: 2701-01-07
            imageUrl: https://image17.example.com/
            wikiUrl: https://wiki17.example.com/
            products:
            - 1
            - 7
            entities:
            - 2
        - person:
            id: 17
            name: Person17
            birthDate: 2017-07-17
            deathDate: 2701-01-07
            imageUrl: https://image17.example.com/
            wikiUrl: https://wiki17.example.com/
            products:
            - 1
            - 7
            entities:
            - 2
      properties:
        persons:
          description: Person array
          items:
            $ref: '#/components/schemas/Person'
          type: array
      type: object
    inline_response_200_5:
      example:
        products:
        - entity:
            id: 2
            name: Entity02
            birthDate: 1936-07-18
            deathDate: 1939-04-01
            imageUrl: https://image02.example.com/
            wikiUrl: https://wiki02.example.com/
            products:
            - 1
            - 7
            persons:
            - 3
            - 17
        - entity:
            id: 2
            name: Entity02
            birthDate: 1936-07-18
            deathDate: 1939-04-01
            imageUrl: https://image02.example.com/
            wikiUrl: https://wiki02.example.com/
            products:
            - 1
            - 7
            persons:
            - 3
            - 17
      properties:
        products:
          description: Entities array
          items:
            $ref: '#/components/schemas/Entity'
          type: array
      type: object
    inline_response_200_6:
      example:
        entities:
        - product:
            id: 7
            name: Product07
            birthDate: 2020-01-01
            deathDate: 2250-12-25
            imageUrl: https://image07.example.com/
            wikiUrl: https://wiki07.example.com/
            persons:
            - 3
            - 17
            entities:
            - 2
        - product:
            id: 7
            name: Product07
            birthDate: 2020-01-01
            deathDate: 2250-12-25
            imageUrl: https://image07.example.com/
            wikiUrl: https://wiki07.example.com/
            persons:
            - 3
            - 17
            entities:
            - 2
      properties:
        entities:
          description: Product array
          items:
            $ref: '#/components/schemas/Product'
          type: array
      type: object
    inline_response_200_7:
      example:
        entities:
        - person:
            id: 17
            name: Person17
            birthDate: 2017-07-17
            deathDate: 2701-01-07
            imageUrl: https://image17.example.com/
            wikiUrl: https://wiki17.example.com/
            products:
            - 1
            - 7
            entities:
            - 2
        - person:
            id: 17
            name: Person17
            birthDate: 2017-07-17
            deathDate: 2701-01-07
            imageUrl: https://image17.example.com/
            wikiUrl: https://wiki17.example.com/
            products:
            - 1
            - 7
            entities:
            - 2
      properties:
        entities:
          description: Person array
          items:
            $ref: '#/components/schemas/Person'
          type: array
      type: object
    inline_response_200_8:
      example:
        products:
        - person:
            id: 17
            name: Person17
            birthDate: 2017-07-17
            deathDate: 2701-01-07
            imageUrl: https://image17.example.com/
            wikiUrl: https://wiki17.example.com/
            products:
            - 1
            - 7
            entities:
            - 2
        - person:
            id: 17
            name: Person17
            birthDate: 2017-07-17
            deathDate: 2701-01-07
            imageUrl: https://image17.example.com/
            wikiUrl: https://wiki17.example.com/
            products:
            - 1
            - 7
            entities:
            - 2
      properties:
        products:
          description: Persons array
          items:
            $ref: '#/components/schemas/Person'
          type: array
      type: object
    Product_allOf:
      properties:
        persons:
          description: Array of Person Ids
          items:
            type: integer
          type: array
        entities:
          description: Array of Entity Ids
          items:
            type: integer
          type: array
    Person_allOf:
      properties:
        products:
          description: Array of Product Ids
          items:
            type: integer
          type: array
        entities:
          description: Array of Entity Ids
          items:
            type: integer
          type: array
    Entity_allOf:
      properties:
        products:
          description: Array of Product Ids
          items:
            type: integer
          type: array
        persons:
          description: Array of Person Ids
          items:
            type: integer
          type: array
  securitySchemes:
    MiWApiSecurity:
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        password:
          scopes:
            reader: 'Permissions: (read, update) [ User, Person, Entity, Product ]'
            writer: 'can also: (create, update, delete) [ User, Person, Entity, Product
              ]'
          tokenUrl: /access_token
      type: oauth2

